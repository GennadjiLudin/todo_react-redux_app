{"version":3,"sources":["components/Title/Title.jsx","components/ToDoInput/ToDoInput.jsx","components/ToDoItem/ToDoItem.jsx","components/ToDoList/ToDoList.jsx","components/Footer/Footer.jsx","containers/Todo/Todo.js","actions/actionCreator.js","constants.js","App.js","serviceWorker.js","reducers/tasks.js","store.js","reducers/filters.js","reducers/rootReducer.js","index.js"],"names":["Title","title","className","defaultProps","ToDoInput","value","onChange","onKeyPress","onBlur","icon","faPlus","placeholder","ToDoItem","text","isCompleted","removeTask","id","completeTask","changeTask","index","useState","edit","setEdit","setInputTask","e","target","onBlurHandle","onKeyPressHandle","key","draggableId","String","provided","draggableProps","dragHandleProps","ref","innerRef","onClick","faCheck","faCircle","autoFocus","faTimes","ToDoList","tasksList","console","log","length","droppableId","Date","now","droppableProps","TransitionGroup","map","CSSTransition","timeout","classNames","FILTERS_BTN","Footer","amount","activeFilter","changeFilter","Todo","state","taskText","handleInputChange","setState","addTask","trim","props","getTime","filterTasks","tasks","filter","task","getActiveTasksCounter","onDragEnd","destination","source","sortTasks","this","filters","isTasksExist","filteredTasks","tasksCounter","Component","connect","type","droppableIndexStart","droppableIndexEnd","App","Boolean","window","location","hostname","match","TASKS","load","namespace","preloadedState","newTask","newState","taskReplaced","splice","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","save","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.34cfd731.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Title.scss';\r\n\r\n\r\nconst Title = ({title}) => {\r\n    return (\r\n    <h1 className=\"title\">{title}</h1>\r\n    )\r\n}\r\n\r\nTitle.defaultProps = {\r\n    title: '',\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport './ToDoInput.scss';\r\n\r\nconst ToDoInput = ({value, onChange, onKeyPress, onBlur}) => {\r\n    return (\r\n        <div className=\"todo-input-wrapper\">\r\n            <FontAwesomeIcon icon={faPlus} className=\"plus\" />\r\n            <input\r\n                className=\"todo-input\"\r\n                placeholder=\"Add task and press Enter\"\r\n                onChange={onChange}\r\n                onKeyPress={onKeyPress}\r\n                onBlur={onBlur}\r\n                value={value}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nToDoInput.defaultProps = {\r\n    onChange: () => {},\r\n    onKeyPress: () => {},\r\n    value: '',\r\n}\r\n\r\nexport default ToDoInput;\r\n","import React, { useState } from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes, faCheck } from '@fortawesome/free-solid-svg-icons';\r\nimport { faCircle } from '@fortawesome/free-regular-svg-icons';\r\n\r\nimport './ToDoItem.scss';\r\n\r\nconst ToDoItem = ({text, isCompleted, removeTask, id, completeTask, changeTask, index}) => {\r\n\r\n    const [edit, setEdit] = useState(false);\r\n\r\n    const setInputTask = (e) => {\r\n        changeTask(id, e.target.value);\r\n    }\r\n\r\n    const onBlurHandle = () => {\r\n        setEdit(!edit);\r\n    }\r\n\r\n    const onKeyPressHandle = ({key}) => {\r\n        if(key === 'Enter') {\r\n            setEdit(!edit);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Draggable draggableId={String(id)} index={index}>\r\n            {provided => (\r\n                <li {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef} className=\"todo-item\">\r\n                    <FontAwesomeIcon \r\n                        onClick={() => completeTask(id)}\r\n                        icon={isCompleted ? faCheck : faCircle}\r\n                        className={isCompleted ? \"mark-complete\" : \"mark\"}\r\n                    />\r\n                    {edit ? \r\n                        <input\r\n                            autoFocus={true}\r\n                            onBlur={onBlurHandle}\r\n                            onKeyPress={onKeyPressHandle}\r\n                            value={text}\r\n                            onChange={setInputTask}\r\n                            className=\"todo-input\"  \r\n                        />\r\n                        :   \r\n                        <span \r\n                            onClick={ () => setEdit(!edit) }\r\n                            className={isCompleted ? \"completed text\" : \"text\"}>\r\n                                {text}\r\n                        </span>\r\n                    }\r\n                \r\n                    <FontAwesomeIcon\r\n                        onClick={() => removeTask(id)}\r\n                        icon={faTimes}\r\n                        className=\"delete\"\r\n                    />\r\n                </li>\r\n            )}\r\n        </Draggable>\r\n    );\r\n}\r\n\r\nToDoItem.defaultProps = {\r\n    text: '',\r\n    isCompleted: false,\r\n    removeTask: () => {},\r\n    completeTask: () => {},\r\n    id: '',\r\n}\r\n  \r\nexport default ToDoItem;","import React from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\n\r\nimport ToDoItem from '../ToDoItem/ToDoItem';\r\n\r\nimport './ToDoList.scss';\r\n\r\n\r\n\r\nconst ToDoList = ({tasksList, removeTask, completeTask, changeTask}) => {\r\n    console.log(tasksList.length);\r\n    return (\r\n        <Droppable droppableId={String(Date.now())}>\r\n            {provided => (\r\n                <>\r\n                <ul {...provided.droppableProps} ref={provided.innerRef} className=\"todo-list\">\r\n                    <TransitionGroup>\r\n                        {tasksList.map(({id, text, isCompleted}, index) => (\r\n                            <CSSTransition\r\n                                key={id}\r\n                                timeout={300}\r\n                                classNames=\"item\"\r\n                            > \r\n                                <ToDoItem\r\n                                    completeTask={completeTask}\r\n                                    removeTask={removeTask}\r\n                                    id={id}\r\n                                    key={id}\r\n                                    text={text}\r\n                                    index={index}\r\n                                    isCompleted={isCompleted}\r\n                                    changeTask={changeTask}\r\n                                />\r\n                            </CSSTransition>\r\n                        ))}\r\n                    </TransitionGroup>\r\n                    {provided.placeholder}\r\n                </ul>\r\n                {tasksList.length === 0 && <span className=\"empty\" >No active task!</span>}\r\n                </>\r\n            )}\r\n            \r\n        </Droppable>\r\n\r\n    );\r\n}\r\n\r\nToDoList.defaultProps = {\r\n    tasksList: [],\r\n    removeTask: () => {},\r\n    completeTask: () => {},\r\n}\r\n\r\nexport default ToDoList;","import React from 'react';\r\n\r\nimport './Footer.scss';\r\n\r\nconst FILTERS_BTN = [\r\n    {\r\n        text: 'All',\r\n        id: 'all',\r\n    },\r\n    {\r\n        text: 'Active',\r\n        id: 'active',\r\n    },\r\n    {\r\n        text: 'Completed',\r\n        id: 'completed',\r\n    },\r\n];\r\n\r\nconst Footer = ({amount, activeFilter, changeFilter}) => {\r\n    return (\r\n        <div className=\"footer\">\r\n            <div className=\"btn-group\">\r\n                {FILTERS_BTN.map(({text, id}) => (\r\n                    <button \r\n                        onClick={() => changeFilter(id)}\r\n                        key={id}\r\n                        className={id === activeFilter ? \"filter-btn active\" : \"filter-btn\"}\r\n                    >{text}</button>\r\n                ))}\r\n            </div>\r\n            <span className=\"amount\"> {`${amount} active tasks`} </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nFooter.defaultProps = {\r\n    amount: 0,\r\n    text: 'Add todo',\r\n    changeFilter: () => {},\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\n\r\nimport { addTask, removeTask, completeTask, changeFilter, changeTask, sortTasks } from '../../actions/actionCreator';\r\n\r\nimport ToDoInput from '../../components/ToDoInput/ToDoInput';\r\nimport ToDoList from '../../components/ToDoList/ToDoList';\r\nimport Footer from '../../components/Footer/Footer';\r\n\r\nimport './Todo.scss';\r\n\r\nclass Todo extends Component {\r\n\r\n    state = {\r\n        taskText: '',\r\n    }\r\n\r\n    handleInputChange = ({target: {value}}) => {\r\n        this.setState({\r\n            taskText: value,\r\n        })\r\n    }\r\n\r\n    addTask = ({key}) => {\r\n        const {taskText} = this.state;\r\n\r\n        if(taskText.trim() !== '' && key === 'Enter') {\r\n            const { addTask } = this.props;\r\n\r\n            addTask((new Date()).getTime(), taskText, false);\r\n\r\n            this.setState({\r\n                taskText: '',\r\n            });\r\n        }\r\n    }\r\n\r\n    onBlurHandle = () => {\r\n        this.setState({\r\n            taskText: '',\r\n        });\r\n    }\r\n\r\n    filterTasks = (tasks, activeFilter) => {\r\n        switch (activeFilter) {\r\n            case 'completed':\r\n                return tasks.filter(task => task.isCompleted);\r\n            case 'active':\r\n                return tasks.filter(task => !task.isCompleted);\r\n            default:\r\n                return tasks;\r\n        }\r\n    }\r\n\r\n    getActiveTasksCounter = tasks => tasks.filter(task => !task.isCompleted).length;\r\n\r\n    onDragEnd = ({destination, source, draggableId}) => {\r\n\r\n        if(!destination) {\r\n            return;\r\n        }\r\n        \r\n        const { sortTasks } = this.props;\r\n\r\n        sortTasks(\r\n            source.index,\r\n            destination.index,\r\n            draggableId\r\n        );\r\n    }\r\n\r\n    render() {\r\n\r\n        const {taskText} = this.state;\r\n        const {tasks, removeTask, completeTask, changeFilter, filters, changeTask} = this.props;\r\n        const isTasksExist = tasks && tasks.length > 0;\r\n        const filteredTasks = this.filterTasks(tasks, filters);\r\n        const tasksCounter = this.getActiveTasksCounter(tasks);\r\n\r\n        return (\r\n            <DragDropContext onDragEnd={this.onDragEnd}>\r\n                <div className=\"todo-wrapper\">\r\n                    <ToDoInput onKeyPress={this.addTask} onBlur={this.onBlurHandle} onChange={this.handleInputChange} value={taskText} />\r\n                    <ToDoList changeTask={changeTask} completeTask={completeTask} tasksList={filteredTasks} removeTask={removeTask} />\r\n                    {isTasksExist && <Footer changeFilter={changeFilter} amount={tasksCounter} activeFilter={filters} />}\r\n                </div>\r\n            </DragDropContext>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect (({ tasks, filters }) =>({\r\n    tasks,\r\n    filters,\r\n}), { addTask, removeTask, completeTask, changeFilter, changeTask, sortTasks })(Todo);","import { ADD_TASK, REMOVE_TASK, COMPLETE_TASK, CHANGE_FILTERS, CHANGE_TASK, DRAG_HAPPENED } from '../constants';\r\n\r\nexport const addTask = (id, text, isCompleted) => ({\r\n    type: ADD_TASK,\r\n    id,\r\n    text,\r\n    isCompleted,\r\n});\r\n\r\nexport const removeTask = id => ({\r\n    type: REMOVE_TASK,\r\n    id,\r\n})\r\n\r\nexport const completeTask = id => ({\r\n    type: COMPLETE_TASK,\r\n    id,\r\n})\r\n\r\nexport const changeFilter = activeFilter => ({\r\n    type: CHANGE_FILTERS,\r\n    activeFilter,\r\n})\r\n\r\nexport const changeTask = (id, text) => ({\r\n    type: CHANGE_TASK,\r\n    id,\r\n    text,\r\n})\r\n\r\nexport const sortTasks = (\r\n    droppableIndexStart,\r\n    droppableIndexEnd,\r\n    draggableId\r\n) => ({\r\n        type: DRAG_HAPPENED,\r\n        droppableIndexStart,\r\n        droppableIndexEnd,\r\n        draggableId\r\n    })","export const ADD_TASK = 'ADD_TASK';\r\nexport const REMOVE_TASK = 'REMOVE_TASK';\r\nexport const COMPLETE_TASK = 'COMPLETE_TASK';\r\nexport const CHANGE_FILTERS = 'CHANGE_FILTERS';\r\nexport const CHANGE_TASK = 'CHANGE_TASK';\r\nexport const DRAG_HAPPENED = 'DRAG_HAPPENED';\r\n","import React from 'react';\r\n\r\nimport Title from './components/Title/Title';\r\nimport Todo from './containers/Todo/Todo';\r\n\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Title title=\"Todo List App\"/>\r\n      <Todo />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { ADD_TASK, REMOVE_TASK, COMPLETE_TASK, CHANGE_TASK, DRAG_HAPPENED } from '../constants';\r\nimport { load } from 'redux-localstorage-simple';\r\n\r\nlet TASKS = load({namespace: 'todo-list'});\r\n\r\nif(!TASKS || !TASKS.tasks || !TASKS.tasks.length) {\r\n    TASKS = {\r\n        tasks: [],\r\n    }\r\n}\r\n\r\n// const TASKS = [\r\n//     {\r\n//         id: 1,\r\n//         text: 'Learn ReactJS',\r\n//         isCompleted: true,\r\n//     },\r\n//     {\r\n//         id: 2,\r\n//         text: 'Learn Router',\r\n//         isCompleted: false,\r\n//     },\r\n//     {\r\n//         id: 3,\r\n//         text: 'Learn Redux',\r\n//         isCompleted: false,\r\n//     },\r\n// ];\r\n\r\nconst tasks = (state = TASKS.tasks, {id, text, isCompleted, type, droppableIndexStart, droppableIndexEnd, draggableId}) => {\r\n    switch(type) {\r\n        case ADD_TASK:\r\n            return [\r\n                ...state, {\r\n                    id,\r\n                    text,\r\n                    isCompleted,\r\n                }\r\n            ];\r\n        case REMOVE_TASK:\r\n            return [...state].filter(task => task.id !== id);\r\n        case COMPLETE_TASK:\r\n            console.log(state);\r\n            return [...state].map(task => {\r\n                let newTask = {...task};\r\n                if(newTask.id === id) {\r\n                    newTask.isCompleted = !newTask.isCompleted;\r\n                }\r\n                return newTask;\r\n            });\r\n        case CHANGE_TASK:\r\n            return [...state].map(task => {\r\n                let newTask = {...task};\r\n                if(newTask.id === id) {\r\n                    newTask.text = text;\r\n                }\r\n                return newTask;\r\n            });\r\n\r\n        case DRAG_HAPPENED:\r\n                let newState = [...state];\r\n                const taskReplaced = newState.splice(droppableIndexStart, 1);\r\n                newState.splice(droppableIndexEnd, 0, ...taskReplaced);\r\n            return newState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport default tasks;","import {createStore, compose, applyMiddleware} from 'redux';\r\nimport { save } from 'redux-localstorage-simple';\r\nimport rootReducer from './reducers/rootReducer';\r\n\r\nconst composeEnhancers =\r\n  typeof window === 'object' &&\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\r\n    }) : compose;\r\n\r\n        const configureStore = preloadedState => (\r\n            createStore(\r\n                rootReducer,\r\n                preloadedState,\r\n                composeEnhancers(\r\n                    applyMiddleware(save({namespace: 'todo-list'}))\r\n                ),\r\n            )\r\n        );\r\n\r\n        const store = configureStore({});\r\n\r\n        export default store;","import { CHANGE_FILTERS } from '../constants';\r\n\r\nconst BASE_FILTER = 'all';\r\n\r\nconst filters = (state = BASE_FILTER, {type, activeFilter}) => {\r\n    switch (type) {\r\n        case CHANGE_FILTERS:\r\n            return activeFilter;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default filters;","import {combineReducers} from 'redux';\r\n\r\nimport tasks from './tasks';\r\nimport filters from './filters';\r\n\r\nconst rootReducer = combineReducers({tasks, filters});\r\n\r\nexport default rootReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport store from './store';\r\n\r\nReactDOM.render((\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}