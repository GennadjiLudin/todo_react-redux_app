{"version":3,"sources":["components/Title/Title.jsx","components/ToDoInput/ToDoInput.jsx","components/ToDoItem/ToDoItem.jsx","components/ToDoList/ToDoList.jsx","components/Footer/Footer.jsx","containers/Todo/Todo.js","actions/actionCreator.js","constants.js","App.js","serviceWorker.js","reducers/tasks.js","store.js","reducers/filters.js","reducers/rootReducer.js","index.js"],"names":["Title","title","className","defaultProps","ToDoInput","value","onChange","onKeyPress","icon","faPlus","placeholder","ToDoItem","text","isCompleted","removeTask","id","completeTask","changeTask","index","useState","edit","setEdit","setInputTask","e","target","draggableId","String","provided","draggableProps","dragHandleProps","ref","innerRef","onClick","faCheck","faCircle","onBlur","faTimes","ToDoList","tasksList","droppableId","droppableProps","TransitionGroup","map","CSSTransition","key","timeout","classNames","FILTERS_BTN","Footer","amount","activeFilter","changeFilter","Todo","state","taskText","handleInputChange","setState","addTask","length","props","Date","getTime","filterTasks","tasks","filter","task","getActiveTasksCounter","onDragEnd","destination","source","sortTasks","this","filters","isTasksExist","filteredTasks","tasksCounter","Component","connect","type","droppableIndexStart","droppableIndexEnd","App","Boolean","window","location","hostname","match","TASKS","load","namespace","preloadedState","console","log","newTask","newState","taskReplaced","splice","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","save","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4a37f42.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Title.scss';\n\n\nconst Title = ({title}) => {\n    return (\n    <h1 className=\"title\">{title}</h1>\n    )\n}\n\nTitle.defaultProps = {\n    title: '',\n}\n\nexport default Title;","import React from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\n\nimport './ToDoInput.scss';\n\nconst ToDoInput = ({value, onChange, onKeyPress}) => {\n    return (\n        <div className=\"todo-input-wrapper\">\n            <FontAwesomeIcon icon={faPlus} className=\"plus\" />\n            <input\n                className=\"todo-input\"\n                placeholder=\"Add task and press Enter\"\n                onChange={onChange}\n                onKeyPress={onKeyPress}\n                value={value}\n            />\n        </div>\n    );\n}\n\nToDoInput.defaultProps = {\n    onChange: () => {},\n    onKeyPress: () => {},\n    value: '',\n}\n\nexport default ToDoInput;\n","import React, { useState } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes, faCheck } from '@fortawesome/free-solid-svg-icons';\nimport { faCircle } from '@fortawesome/free-regular-svg-icons';\n\nimport './ToDoItem.scss';\n\nconst ToDoItem = ({text, isCompleted, removeTask, id, completeTask, changeTask, index}) => {\n\n    const [edit, setEdit] = useState(false);\n\n    const setInputTask = (e) => {\n        changeTask(id, e.target.value);\n    }\n\n    const onBlurHandle = () => {\n        setEdit(!edit);\n    }\n\n    return (\n        <Draggable draggableId={String(id)} index={index}>\n            {provided => (\n                <li {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef} className=\"todo-item\">\n                    <FontAwesomeIcon \n                        onClick={() => completeTask(id)}\n                        icon={isCompleted ? faCheck : faCircle}\n                        className={isCompleted ? \"mark-complete\" : \"mark\"}\n                    />\n                    {edit ? \n                        <input\n                            onBlur={() => onBlurHandle()}\n                            value={text}\n                            onChange={setInputTask}\n                            className=\"todo-input\"  \n                        />\n                        :   \n                        <span \n                            onClick={ () => setEdit(!edit) }\n                            className={isCompleted ? \"completed text\" : \"text\"}>\n                                {text}\n                        </span>\n                    }\n                \n                    <FontAwesomeIcon\n                        onClick={() => removeTask(id)}\n                        icon={faTimes}\n                        className=\"delete\"\n                    />\n                </li>\n            )}\n        </Draggable>\n    );\n}\n\nToDoItem.defaultProps = {\n    text: '',\n    isCompleted: false,\n    removeTask: () => {},\n    completeTask: () => {},\n    id: '',\n}\n  \nexport default ToDoItem;","import React from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { Droppable } from \"react-beautiful-dnd\";\n\nimport ToDoItem from '../ToDoItem/ToDoItem';\n\nimport './ToDoList.scss';\n\n\n\nconst ToDoList = ({tasksList, removeTask, completeTask, changeTask}) => {\n    return (\n        <Droppable droppableId={String(tasksList[0] + 1)}>\n            {provided => (\n                <ul {...provided.droppableProps} ref={provided.innerRef} className=\"todo-list\">\n                    <TransitionGroup>\n                        {tasksList.map(({id, text, isCompleted}, index) => (\n                            <CSSTransition\n                                key={id}\n                                timeout={500}\n                                classNames=\"item\"\n                            >\n                                <ToDoItem\n                                    completeTask={completeTask}\n                                    removeTask={removeTask}\n                                    id={id}\n                                    key={id}\n                                    text={text}\n                                    index={index}\n                                    isCompleted={isCompleted}\n                                    changeTask={changeTask}\n                                />\n                            </CSSTransition>\n                        ))}\n                    </TransitionGroup>\n                    {provided.placeholder}\n                </ul>\n            )}\n        </Droppable>\n    );\n}\n\nToDoList.defaultProps = {\n    tasksList: [],\n    removeTask: () => {},\n    completeTask: () => {},\n}\n\nexport default ToDoList;","import React from 'react';\n\nimport './Footer.scss';\n\nconst FILTERS_BTN = [\n    {\n        text: 'All',\n        id: 'all',\n    },\n    {\n        text: 'Active',\n        id: 'active',\n    },\n    {\n        text: 'Completed',\n        id: 'completed',\n    },\n];\n\nconst Footer = ({amount, activeFilter, changeFilter}) => {\n    return (\n        <div className=\"footer\">\n            <div className=\"btn-group\">\n                {FILTERS_BTN.map(({text, id}) => (\n                    <button \n                        onClick={() => changeFilter(id)}\n                        key={id}\n                        className={id === activeFilter ? \"filter-btn active\" : \"filter-btn\"}\n                    >{text}</button>\n                ))}\n            </div>\n            <span className=\"amount\"> {`${amount} active tasks`} </span>\n        </div>\n    )\n}\n\nFooter.defaultProps = {\n    amount: 0,\n    text: 'Add todo',\n    changeFilter: () => {},\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { DragDropContext } from 'react-beautiful-dnd';\n\nimport { addTask, removeTask, completeTask, changeFilter, changeTask, sortTasks } from '../../actions/actionCreator';\n\nimport ToDoInput from '../../components/ToDoInput/ToDoInput';\nimport ToDoList from '../../components/ToDoList/ToDoList';\nimport Footer from '../../components/Footer/Footer';\n\nimport './Todo.scss';\n\nclass Todo extends Component {\n\n    state = {\n        taskText: '',\n    }\n\n    handleInputChange = ({target: {value}}) => {\n        this.setState({\n            taskText: value,\n        })\n    }\n\n    addTask = ({key}) => {\n        const {taskText} = this.state;\n\n        if(taskText.length > 3 && key === 'Enter') {\n            const { addTask } = this.props;\n\n            addTask((new Date()).getTime(), taskText, false);\n\n            this.setState({\n                taskText: '',\n            })\n        }\n    }\n\n    filterTasks = (tasks, activeFilter) => {\n        switch (activeFilter) {\n            case 'completed':\n                return tasks.filter(task => task.isCompleted);\n            case 'active':\n                return tasks.filter(task => !task.isCompleted);\n            default:\n                return tasks;\n        }\n    }\n\n    getActiveTasksCounter = tasks => tasks.filter(task => !task.isCompleted).length;\n\n    onDragEnd = ({destination, source, draggableId}) => {\n\n        if(!destination) {\n            return;\n        }\n        \n        const { sortTasks } = this.props;\n\n        sortTasks(\n            source.index,\n            destination.index,\n            draggableId\n        );\n    }\n\n    render() {\n\n        const {taskText} = this.state;\n        const {tasks, removeTask, completeTask, changeFilter, filters, changeTask} = this.props;\n        const isTasksExist = tasks && tasks.length > 0;\n        const filteredTasks = this.filterTasks(tasks, filters);\n        const tasksCounter = this.getActiveTasksCounter(tasks);\n\n        return (\n            <DragDropContext onDragEnd={this.onDragEnd}>\n                <div className=\"todo-wrapper\">\n                    <ToDoInput onKeyPress={this.addTask} onChange={this.handleInputChange} value={taskText} />\n                    {isTasksExist && <ToDoList changeTask={changeTask} completeTask={completeTask} tasksList={filteredTasks} removeTask={removeTask} /> }\n                    {isTasksExist && <Footer changeFilter={changeFilter} amount={tasksCounter} activeFilter={filters} />}\n                </div>\n            </DragDropContext>\n        );\n    }\n}\n\nexport default connect (({ tasks, filters }) =>({\n    tasks,\n    filters,\n}), { addTask, removeTask, completeTask, changeFilter, changeTask, sortTasks })(Todo);","import { ADD_TASK, REMOVE_TASK, COMPLETE_TASK, CHANGE_FILTERS, CHANGE_TASK, DRAG_HAPPENED } from '../constants';\n\nexport const addTask = (id, text, isCompleted) => ({\n    type: ADD_TASK,\n    id,\n    text,\n    isCompleted,\n});\n\nexport const removeTask = id => ({\n    type: REMOVE_TASK,\n    id,\n})\n\nexport const completeTask = id => ({\n    type: COMPLETE_TASK,\n    id,\n})\n\nexport const changeFilter = activeFilter => ({\n    type: CHANGE_FILTERS,\n    activeFilter,\n})\n\nexport const changeTask = (id, text) => ({\n    type: CHANGE_TASK,\n    id,\n    text,\n})\n\nexport const sortTasks = (\n    droppableIndexStart,\n    droppableIndexEnd,\n    draggableId\n) => ({\n        type: DRAG_HAPPENED,\n        droppableIndexStart,\n        droppableIndexEnd,\n        draggableId\n    })","export const ADD_TASK = 'ADD_TASK';\nexport const REMOVE_TASK = 'REMOVE_TASK';\nexport const COMPLETE_TASK = 'COMPLETE_TASK';\nexport const CHANGE_FILTERS = 'CHANGE_FILTERS';\nexport const CHANGE_TASK = 'CHANGE_TASK';\nexport const DRAG_HAPPENED = 'DRAG_HAPPENED';\n","import React from 'react';\n\nimport Title from './components/Title/Title'\nimport Todo from './containers/Todo/Todo'\n\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Title title=\"Todo List App\"/>\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_TASK, REMOVE_TASK, COMPLETE_TASK, CHANGE_TASK, DRAG_HAPPENED } from '../constants';\nimport { load } from 'redux-localstorage-simple';\n\nlet TASKS = load({namespace: 'todo-list'});\n\nif(!TASKS || !TASKS.tasks || !TASKS.tasks.length) {\n    TASKS = {\n        tasks: [],\n    }\n}\n\n// const TASKS = [\n//     {\n//         id: 1,\n//         text: 'Learn ReactJS',\n//         isCompleted: true,\n//     },\n//     {\n//         id: 2,\n//         text: 'Learn Router',\n//         isCompleted: false,\n//     },\n//     {\n//         id: 3,\n//         text: 'Learn Redux',\n//         isCompleted: false,\n//     },\n// ];\n\nconst tasks = (state = TASKS.tasks, {id, text, isCompleted, type, droppableIndexStart, droppableIndexEnd, draggableId}) => {\n    switch(type) {\n        case ADD_TASK:\n            return [\n                ...state, {\n                    id,\n                    text,\n                    isCompleted,\n                }\n            ];\n        case REMOVE_TASK:\n            return [...state].filter(task => task.id !== id);\n        case COMPLETE_TASK:\n            console.log(state);\n            return [...state].map(task => {\n                let newTask = {...task};\n                if(newTask.id === id) {\n                    newTask.isCompleted = !newTask.isCompleted;\n                }\n                return newTask;\n            });\n        case CHANGE_TASK:\n            return [...state].map(task => {\n                let newTask = {...task};\n                if(newTask.id === id) {\n                    newTask.text = text;\n                }\n                return newTask;\n            });\n\n        case DRAG_HAPPENED:\n                let newState = [...state];\n                const taskReplaced = newState.splice(droppableIndexStart, 1);\n                newState.splice(droppableIndexEnd, 0, ...taskReplaced);\n            return newState;\n\n        default:\n            return state;\n    }\n}\n\n\nexport default tasks;","import {createStore, compose, applyMiddleware} from 'redux';\nimport { save } from 'redux-localstorage-simple';\nimport rootReducer from './reducers/rootReducer';\n\nconst composeEnhancers =\n  typeof window === 'object' &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n    }) : compose;\n\n        const configureStore = preloadedState => (\n            createStore(\n                rootReducer,\n                preloadedState,\n                composeEnhancers(\n                    applyMiddleware(save({namespace: 'todo-list'}))\n                ),\n            )\n        );\n\n        const store = configureStore({});\n\n        export default store;","import { CHANGE_FILTERS } from '../constants';\n\nconst BASE_FILTER = 'all';\n\nconst filters = (state = BASE_FILTER, {type, activeFilter}) => {\n    switch (type) {\n        case CHANGE_FILTERS:\n            return activeFilter;\n        default:\n            return state;\n    }\n}\n\nexport default filters;","import {combineReducers} from 'redux';\n\nimport tasks from './tasks';\nimport filters from './filters';\n\nconst rootReducer = combineReducers({tasks, filters});\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from './store';\n\nReactDOM.render((\n    <Provider store={store}>\n        <App />\n    </Provider>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}